[
    DefModule {
        name: Ident {
            data: "DefinitionsAndSpecifiers",
            node_id: Span {
                start: [ local path prefix ]/syntax.fpp:2:9,
                end: [ local path prefix ]/syntax.fpp:2:33,
            },
        },
        members: [
            DefAbsType {
                name: Ident {
                    data: "T",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:5:9,
                        end: [ local path prefix ]/syntax.fpp:6:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:5:4,
                    end: [ local path prefix ]/syntax.fpp:6:1,
                },
                pre_annotation: [
                    "Abstract type definition",
                ],
                post_annotation: [
                    "Abstract type definition",
                ],
            },
            DefAliasType {
                name: Ident {
                    data: "TA",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:9:9,
                        end: [ local path prefix ]/syntax.fpp:9:11,
                    },
                },
                type_name: TypeName {
                    kind: QualIdent(
                        Ident {
                            data: "T",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:9:14,
                                end: [ local path prefix ]/syntax.fpp:10:1,
                            },
                        },
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:9:14,
                        end: [ local path prefix ]/syntax.fpp:10:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:9:4,
                    end: [ local path prefix ]/syntax.fpp:10:1,
                },
                pre_annotation: [
                    "Type alias definition",
                ],
                post_annotation: [
                    "Type alias definition",
                ],
            },
            DefArray {
                name: Ident {
                    data: "A",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:13:10,
                        end: [ local path prefix ]/syntax.fpp:13:11,
                    },
                },
                size: Expr {
                    kind: LiteralInt(
                        "10",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:13:15,
                        end: [ local path prefix ]/syntax.fpp:13:17,
                    },
                },
                elt_type: TypeName {
                    kind: Integer(
                        U32,
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:13:19,
                        end: [ local path prefix ]/syntax.fpp:13:22,
                    },
                },
                default: Some(
                    Expr {
                        kind: LiteralInt(
                            "0",
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:13:31,
                            end: [ local path prefix ]/syntax.fpp:13:32,
                        },
                    },
                ),
                format: Some(
                    LitString {
                        data: "{} counts",
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:13:40,
                            end: [ local path prefix ]/syntax.fpp:14:1,
                        },
                    },
                ),
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:13:4,
                    end: [ local path prefix ]/syntax.fpp:14:1,
                },
                pre_annotation: [
                    "Array definition",
                ],
                post_annotation: [
                    "Array definition",
                ],
            },
            DefStateMachine {
                name: Ident {
                    data: "SO",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:17:18,
                        end: [ local path prefix ]/syntax.fpp:18:1,
                    },
                },
                members: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:17:4,
                    end: [ local path prefix ]/syntax.fpp:18:1,
                },
                pre_annotation: [
                    "State machine outside a component",
                ],
                post_annotation: [
                    "State machine outside a component",
                ],
            },
            DefInterface {
                name: Ident {
                    data: "I",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:21:14,
                        end: [ local path prefix ]/syntax.fpp:21:15,
                    },
                },
                members: [
                    SpecPortInstance {
                        kind: General {
                            kind: Input(
                                Sync,
                            ),
                            name: Ident {
                                data: "pI",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:23:22,
                                    end: [ local path prefix ]/syntax.fpp:23:24,
                                },
                            },
                            size: Some(
                                Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:23:27,
                                        end: [ local path prefix ]/syntax.fpp:23:29,
                                    },
                                },
                            ),
                            port: Some(
                                Ident {
                                    data: "P",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:23:31,
                                        end: [ local path prefix ]/syntax.fpp:23:32,
                                    },
                                },
                            ),
                            priority: Some(
                                Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:23:42,
                                        end: [ local path prefix ]/syntax.fpp:23:44,
                                    },
                                },
                            ),
                            queue_full: Some(
                                Assert,
                            ),
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:23:6,
                            end: [ local path prefix ]/syntax.fpp:24:1,
                        },
                        pre_annotation: [
                            "General port instance specifier",
                        ],
                        post_annotation: [
                            "General port instance specifier",
                        ],
                    },
                    SpecPortInstance {
                        kind: Special {
                            input_kind: None,
                            kind: CommandRecv,
                            name: Ident {
                                data: "cmdIn",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:27:24,
                                    end: [ local path prefix ]/syntax.fpp:28:1,
                                },
                            },
                            priority: None,
                            queue_full: None,
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:27:6,
                            end: [ local path prefix ]/syntax.fpp:28:1,
                        },
                        pre_annotation: [
                            "Special port instance specifier",
                        ],
                        post_annotation: [
                            "Special port instance specifier",
                        ],
                    },
                    SpecImport {
                        sym: Ident {
                            data: "J",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:31:13,
                                end: [ local path prefix ]/syntax.fpp:32:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:31:6,
                            end: [ local path prefix ]/syntax.fpp:32:1,
                        },
                        pre_annotation: [
                            "Interface import specifier",
                        ],
                        post_annotation: [
                            "Interface import specifier",
                        ],
                    },
                ],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:21:4,
                    end: [ local path prefix ]/syntax.fpp:34:1,
                },
                pre_annotation: [
                    "Interface definition",
                ],
                post_annotation: [
                    "Interface definition",
                ],
            },
            DefComponent {
                kind: Active,
                name: Ident {
                    data: "C",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:37:21,
                        end: [ local path prefix ]/syntax.fpp:37:22,
                    },
                },
                members: [
                    DefAbsType {
                        name: Ident {
                            data: "T",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:39:11,
                                end: [ local path prefix ]/syntax.fpp:40:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:39:6,
                            end: [ local path prefix ]/syntax.fpp:40:1,
                        },
                    },
                    DefArray {
                        name: Ident {
                            data: "A",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:40:12,
                                end: [ local path prefix ]/syntax.fpp:40:13,
                            },
                        },
                        size: Expr {
                            kind: LiteralInt(
                                "3",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:40:17,
                                end: [ local path prefix ]/syntax.fpp:40:18,
                            },
                        },
                        elt_type: TypeName {
                            kind: Integer(
                                U32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:40:20,
                                end: [ local path prefix ]/syntax.fpp:41:1,
                            },
                        },
                        default: None,
                        format: None,
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:40:6,
                            end: [ local path prefix ]/syntax.fpp:41:1,
                        },
                    },
                    DefStruct {
                        name: Ident {
                            data: "S",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:41:13,
                                end: [ local path prefix ]/syntax.fpp:41:14,
                            },
                        },
                        members: [
                            StructTypeMember {
                                name: Ident {
                                    data: "x",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:41:17,
                                        end: [ local path prefix ]/syntax.fpp:41:18,
                                    },
                                },
                                size: Some(
                                    Expr {
                                        kind: LiteralInt(
                                            "3",
                                        ),
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:41:21,
                                            end: [ local path prefix ]/syntax.fpp:41:22,
                                        },
                                    },
                                ),
                                type_name: TypeName {
                                    kind: Integer(
                                        U32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:41:24,
                                        end: [ local path prefix ]/syntax.fpp:41:27,
                                    },
                                },
                                format: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:41:17,
                                    end: [ local path prefix ]/syntax.fpp:41:27,
                                },
                            },
                            StructTypeMember {
                                name: Ident {
                                    data: "y",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:41:29,
                                        end: [ local path prefix ]/syntax.fpp:41:30,
                                    },
                                },
                                size: None,
                                type_name: TypeName {
                                    kind: Floating(
                                        F32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:41:32,
                                        end: [ local path prefix ]/syntax.fpp:41:35,
                                    },
                                },
                                format: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:41:29,
                                    end: [ local path prefix ]/syntax.fpp:41:35,
                                },
                            },
                            StructTypeMember {
                                name: Ident {
                                    data: "z",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:41:37,
                                        end: [ local path prefix ]/syntax.fpp:41:38,
                                    },
                                },
                                size: None,
                                type_name: TypeName {
                                    kind: String(
                                        None,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:41:40,
                                        end: [ local path prefix ]/syntax.fpp:41:46,
                                    },
                                },
                                format: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:41:37,
                                    end: [ local path prefix ]/syntax.fpp:41:46,
                                },
                            },
                        ],
                        default: None,
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:41:6,
                            end: [ local path prefix ]/syntax.fpp:42:1,
                        },
                    },
                    DefEnum {
                        name: Ident {
                            data: "E",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:42:11,
                                end: [ local path prefix ]/syntax.fpp:42:12,
                            },
                        },
                        type_name: None,
                        constants: [
                            DefEnumConstant {
                                name: Ident {
                                    data: "X",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:42:15,
                                        end: [ local path prefix ]/syntax.fpp:42:16,
                                    },
                                },
                                value: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:42:15,
                                    end: [ local path prefix ]/syntax.fpp:42:16,
                                },
                            },
                            DefEnumConstant {
                                name: Ident {
                                    data: "Y",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:42:18,
                                        end: [ local path prefix ]/syntax.fpp:42:19,
                                    },
                                },
                                value: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:42:18,
                                    end: [ local path prefix ]/syntax.fpp:42:19,
                                },
                            },
                            DefEnumConstant {
                                name: Ident {
                                    data: "Z",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:42:21,
                                        end: [ local path prefix ]/syntax.fpp:42:22,
                                    },
                                },
                                value: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:42:21,
                                    end: [ local path prefix ]/syntax.fpp:42:22,
                                },
                            },
                        ],
                        default: Some(
                            Expr {
                                kind: Ident(
                                    "X",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:42:33,
                                    end: [ local path prefix ]/syntax.fpp:43:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:42:6,
                            end: [ local path prefix ]/syntax.fpp:43:1,
                        },
                    },
                    SpecContainer {
                        name: Ident {
                            data: "C",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:45:24,
                                end: [ local path prefix ]/syntax.fpp:45:25,
                            },
                        },
                        id: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:45:29,
                                    end: [ local path prefix ]/syntax.fpp:45:33,
                                },
                            },
                        ),
                        default_priority: Some(
                            Expr {
                                kind: LiteralInt(
                                    "10",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:45:51,
                                    end: [ local path prefix ]/syntax.fpp:46:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:45:6,
                            end: [ local path prefix ]/syntax.fpp:46:1,
                        },
                        pre_annotation: [
                            "Container specifier",
                        ],
                        post_annotation: [
                            "Container specifier",
                        ],
                    },
                    SpecRecord {
                        name: Ident {
                            data: "R",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:49:21,
                                end: [ local path prefix ]/syntax.fpp:49:22,
                            },
                        },
                        record_type: TypeName {
                            kind: Integer(
                                U32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:49:24,
                                end: [ local path prefix ]/syntax.fpp:49:27,
                            },
                        },
                        is_array: true,
                        id: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:49:37,
                                    end: [ local path prefix ]/syntax.fpp:50:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:49:6,
                            end: [ local path prefix ]/syntax.fpp:50:1,
                        },
                        pre_annotation: [
                            "Record specifier",
                        ],
                        post_annotation: [
                            "Record specifier",
                        ],
                    },
                    SpecCommand {
                        kind: Async,
                        name: Ident {
                            data: "C",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:53:20,
                                end: [ local path prefix ]/syntax.fpp:53:21,
                            },
                        },
                        params: [
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "a",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:53:22,
                                        end: [ local path prefix ]/syntax.fpp:53:23,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Integer(
                                        U32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:53:25,
                                        end: [ local path prefix ]/syntax.fpp:53:28,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:53:22,
                                    end: [ local path prefix ]/syntax.fpp:53:28,
                                },
                            },
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:53:30,
                                        end: [ local path prefix ]/syntax.fpp:53:31,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Floating(
                                        F32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:53:33,
                                        end: [ local path prefix ]/syntax.fpp:53:36,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:53:30,
                                    end: [ local path prefix ]/syntax.fpp:53:36,
                                },
                            },
                        ],
                        opcode: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:53:45,
                                    end: [ local path prefix ]/syntax.fpp:53:49,
                                },
                            },
                        ),
                        priority: Some(
                            Expr {
                                kind: LiteralInt(
                                    "10",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:53:59,
                                    end: [ local path prefix ]/syntax.fpp:53:61,
                                },
                            },
                        ),
                        queue_full: Some(
                            Assert,
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:53:6,
                            end: [ local path prefix ]/syntax.fpp:54:1,
                        },
                        pre_annotation: [
                            "Command specifier",
                        ],
                        post_annotation: [
                            "Command specifier",
                        ],
                    },
                    SpecParam {
                        name: Ident {
                            data: "P",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:57:21,
                                end: [ local path prefix ]/syntax.fpp:57:22,
                            },
                        },
                        type_name: TypeName {
                            kind: Integer(
                                U32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:57:24,
                                end: [ local path prefix ]/syntax.fpp:57:27,
                            },
                        },
                        default: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:57:36,
                                    end: [ local path prefix ]/syntax.fpp:57:37,
                                },
                            },
                        ),
                        id: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:57:41,
                                    end: [ local path prefix ]/syntax.fpp:57:45,
                                },
                            },
                        ),
                        set_opcode: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x01",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:57:57,
                                    end: [ local path prefix ]/syntax.fpp:57:61,
                                },
                            },
                        ),
                        save_opcode: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x02",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:57:74,
                                    end: [ local path prefix ]/syntax.fpp:58:1,
                                },
                            },
                        ),
                        is_external: true,
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:57:6,
                            end: [ local path prefix ]/syntax.fpp:58:1,
                        },
                        pre_annotation: [
                            "Parameter specifier",
                        ],
                        post_annotation: [
                            "Parameter specifier",
                        ],
                    },
                    SpecPortInstance {
                        kind: General {
                            kind: Input(
                                Sync,
                            ),
                            name: Ident {
                                data: "p1",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:61:22,
                                    end: [ local path prefix ]/syntax.fpp:61:24,
                                },
                            },
                            size: Some(
                                Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:61:27,
                                        end: [ local path prefix ]/syntax.fpp:61:29,
                                    },
                                },
                            ),
                            port: Some(
                                Ident {
                                    data: "P",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:61:31,
                                        end: [ local path prefix ]/syntax.fpp:61:32,
                                    },
                                },
                            ),
                            priority: Some(
                                Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:61:42,
                                        end: [ local path prefix ]/syntax.fpp:61:44,
                                    },
                                },
                            ),
                            queue_full: Some(
                                Assert,
                            ),
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:61:6,
                            end: [ local path prefix ]/syntax.fpp:62:1,
                        },
                        pre_annotation: [
                            "General port instance specifier",
                        ],
                        post_annotation: [
                            "General port instance specifier",
                        ],
                    },
                    SpecPortInstance {
                        kind: Special {
                            input_kind: None,
                            kind: CommandRecv,
                            name: Ident {
                                data: "cmdIn",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:65:24,
                                    end: [ local path prefix ]/syntax.fpp:66:1,
                                },
                            },
                            priority: None,
                            queue_full: None,
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:65:6,
                            end: [ local path prefix ]/syntax.fpp:66:1,
                        },
                        pre_annotation: [
                            "Special port instance specifier",
                        ],
                        post_annotation: [
                            "Special port instance specifier",
                        ],
                    },
                    SpecPortInstance {
                        kind: Special {
                            input_kind: Some(
                                Async,
                            ),
                            kind: ProductRecv,
                            name: Ident {
                                data: "productRecvIn",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:69:30,
                                    end: [ local path prefix ]/syntax.fpp:69:43,
                                },
                            },
                            priority: Some(
                                Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:69:53,
                                        end: [ local path prefix ]/syntax.fpp:69:55,
                                    },
                                },
                            ),
                            queue_full: Some(
                                Assert,
                            ),
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:69:6,
                            end: [ local path prefix ]/syntax.fpp:70:1,
                        },
                        pre_annotation: [
                            "Async product receive port",
                        ],
                        post_annotation: [
                            "Async product receive port",
                        ],
                    },
                    DefStateMachine {
                        name: Ident {
                            data: "S",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:73:20,
                                end: [ local path prefix ]/syntax.fpp:74:1,
                            },
                        },
                        members: None,
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:73:6,
                            end: [ local path prefix ]/syntax.fpp:74:1,
                        },
                        pre_annotation: [
                            "Internal Component State machine definition",
                        ],
                        post_annotation: [
                            "State machine definition",
                        ],
                    },
                    SpecStateMachineInstance {
                        name: Ident {
                            data: "s1",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:77:29,
                                end: [ local path prefix ]/syntax.fpp:77:31,
                            },
                        },
                        state_machine: Ident {
                            data: "S",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:77:33,
                                end: [ local path prefix ]/syntax.fpp:77:34,
                            },
                        },
                        priority: Some(
                            Expr {
                                kind: LiteralInt(
                                    "10",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:77:44,
                                    end: [ local path prefix ]/syntax.fpp:77:46,
                                },
                            },
                        ),
                        queue_full: Some(
                            Drop,
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:77:6,
                            end: [ local path prefix ]/syntax.fpp:78:1,
                        },
                        pre_annotation: [
                            "State machine instance 1",
                        ],
                        post_annotation: [
                            "State machine instance 1",
                        ],
                    },
                    SpecStateMachineInstance {
                        name: Ident {
                            data: "s2",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:81:29,
                                end: [ local path prefix ]/syntax.fpp:81:31,
                            },
                        },
                        state_machine: Ident {
                            data: "S",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:81:33,
                                end: [ local path prefix ]/syntax.fpp:82:1,
                            },
                        },
                        priority: None,
                        queue_full: None,
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:81:6,
                            end: [ local path prefix ]/syntax.fpp:82:1,
                        },
                        pre_annotation: [
                            "State machine instance 2",
                        ],
                        post_annotation: [
                            "State machine instance 2",
                        ],
                    },
                    SpecStateMachineInstance {
                        name: Ident {
                            data: "so",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:85:29,
                                end: [ local path prefix ]/syntax.fpp:85:31,
                            },
                        },
                        state_machine: Ident {
                            data: "SO",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:85:33,
                                end: [ local path prefix ]/syntax.fpp:86:1,
                            },
                        },
                        priority: None,
                        queue_full: None,
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:85:6,
                            end: [ local path prefix ]/syntax.fpp:86:1,
                        },
                        pre_annotation: [
                            "State machine for outside definition",
                        ],
                        post_annotation: [
                            "State machine for outside definition",
                        ],
                    },
                    SpecPortInstance {
                        kind: General {
                            kind: Output,
                            name: Ident {
                                data: "p2",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:88:18,
                                    end: [ local path prefix ]/syntax.fpp:88:20,
                                },
                            },
                            size: Some(
                                Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:88:23,
                                        end: [ local path prefix ]/syntax.fpp:88:25,
                                    },
                                },
                            ),
                            port: Some(
                                Ident {
                                    data: "P",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:88:27,
                                        end: [ local path prefix ]/syntax.fpp:89:1,
                                    },
                                },
                            ),
                            priority: None,
                            queue_full: None,
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:88:6,
                            end: [ local path prefix ]/syntax.fpp:89:1,
                        },
                    },
                    SpecPortMatching {
                        port1: Ident {
                            data: "p1",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:90:12,
                                end: [ local path prefix ]/syntax.fpp:90:14,
                            },
                        },
                        port2: Ident {
                            data: "p2",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:90:20,
                                end: [ local path prefix ]/syntax.fpp:91:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:90:6,
                            end: [ local path prefix ]/syntax.fpp:91:1,
                        },
                        pre_annotation: [
                            "Port matching specifier",
                        ],
                        post_annotation: [
                            "Port matching specifier",
                        ],
                    },
                    SpecTlmChannel {
                        name: Ident {
                            data: "T",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:94:16,
                                end: [ local path prefix ]/syntax.fpp:94:17,
                            },
                        },
                        type_name: TypeName {
                            kind: Integer(
                                U32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:94:19,
                                end: [ local path prefix ]/syntax.fpp:94:22,
                            },
                        },
                        id: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:94:26,
                                    end: [ local path prefix ]/syntax.fpp:94:30,
                                },
                            },
                        ),
                        update: Some(
                            OnChange,
                        ),
                        format: Some(
                            LitString {
                                data: "{} s",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:94:55,
                                    end: [ local path prefix ]/syntax.fpp:94:61,
                                },
                            },
                        ),
                        low: [
                            TlmChannelLimit {
                                kind: Red,
                                value: Expr {
                                    kind: LiteralInt(
                                        "0",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:95:18,
                                        end: [ local path prefix ]/syntax.fpp:95:19,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:95:14,
                                    end: [ local path prefix ]/syntax.fpp:95:19,
                                },
                            },
                            TlmChannelLimit {
                                kind: Orange,
                                value: Expr {
                                    kind: LiteralInt(
                                        "1",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:95:28,
                                        end: [ local path prefix ]/syntax.fpp:95:29,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:95:21,
                                    end: [ local path prefix ]/syntax.fpp:95:29,
                                },
                            },
                            TlmChannelLimit {
                                kind: Yellow,
                                value: Expr {
                                    kind: LiteralInt(
                                        "2",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:95:38,
                                        end: [ local path prefix ]/syntax.fpp:95:39,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:95:31,
                                    end: [ local path prefix ]/syntax.fpp:95:39,
                                },
                            },
                        ],
                        high: [
                            TlmChannelLimit {
                                kind: Yellow,
                                value: Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:96:22,
                                        end: [ local path prefix ]/syntax.fpp:96:24,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:96:15,
                                    end: [ local path prefix ]/syntax.fpp:96:24,
                                },
                            },
                            TlmChannelLimit {
                                kind: Orange,
                                value: Expr {
                                    kind: LiteralInt(
                                        "11",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:96:33,
                                        end: [ local path prefix ]/syntax.fpp:96:35,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:96:26,
                                    end: [ local path prefix ]/syntax.fpp:96:35,
                                },
                            },
                            TlmChannelLimit {
                                kind: Red,
                                value: Expr {
                                    kind: LiteralInt(
                                        "12",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:96:41,
                                        end: [ local path prefix ]/syntax.fpp:96:43,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:96:37,
                                    end: [ local path prefix ]/syntax.fpp:96:43,
                                },
                            },
                        ],
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:94:6,
                            end: [ local path prefix ]/syntax.fpp:97:1,
                        },
                        pre_annotation: [
                            "Telemetry channel specifier",
                        ],
                        post_annotation: [
                            "Telemetry channel specifier",
                        ],
                    },
                    SpecEvent {
                        name: Ident {
                            data: "E",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:100:12,
                                end: [ local path prefix ]/syntax.fpp:100:13,
                            },
                        },
                        params: [
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "a",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:100:14,
                                        end: [ local path prefix ]/syntax.fpp:100:15,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Integer(
                                        U32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:100:17,
                                        end: [ local path prefix ]/syntax.fpp:100:20,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:100:14,
                                    end: [ local path prefix ]/syntax.fpp:100:20,
                                },
                            },
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:100:22,
                                        end: [ local path prefix ]/syntax.fpp:100:23,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Floating(
                                        F32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:100:25,
                                        end: [ local path prefix ]/syntax.fpp:100:28,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:100:22,
                                    end: [ local path prefix ]/syntax.fpp:100:28,
                                },
                            },
                        ],
                        severity: ActivityLow,
                        id: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:100:55,
                                    end: [ local path prefix ]/syntax.fpp:100:59,
                                },
                            },
                        ),
                        format: LitString {
                            data: "{} counts",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:100:67,
                                end: [ local path prefix ]/syntax.fpp:100:78,
                            },
                        },
                        throttle: Some(
                            EventThrottle {
                                count: Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:100:88,
                                        end: [ local path prefix ]/syntax.fpp:101:1,
                                    },
                                },
                                every: None,
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:100:79,
                                    end: [ local path prefix ]/syntax.fpp:101:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:100:6,
                            end: [ local path prefix ]/syntax.fpp:101:1,
                        },
                        pre_annotation: [
                            "Event specifier",
                        ],
                        post_annotation: [
                            "Event specifier",
                        ],
                    },
                    SpecEvent {
                        name: Ident {
                            data: "ET",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:104:12,
                                end: [ local path prefix ]/syntax.fpp:104:14,
                            },
                        },
                        params: [
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "a",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:104:15,
                                        end: [ local path prefix ]/syntax.fpp:104:16,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Integer(
                                        U32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:104:18,
                                        end: [ local path prefix ]/syntax.fpp:104:21,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:104:15,
                                    end: [ local path prefix ]/syntax.fpp:104:21,
                                },
                            },
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:104:23,
                                        end: [ local path prefix ]/syntax.fpp:104:24,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Floating(
                                        F32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:104:26,
                                        end: [ local path prefix ]/syntax.fpp:104:29,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:104:23,
                                    end: [ local path prefix ]/syntax.fpp:104:29,
                                },
                            },
                        ],
                        severity: ActivityHigh,
                        id: Some(
                            Expr {
                                kind: LiteralInt(
                                    "0x00",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:104:57,
                                    end: [ local path prefix ]/syntax.fpp:104:61,
                                },
                            },
                        ),
                        format: LitString {
                            data: "{} counts",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:104:69,
                                end: [ local path prefix ]/syntax.fpp:104:80,
                            },
                        },
                        throttle: Some(
                            EventThrottle {
                                count: Expr {
                                    kind: LiteralInt(
                                        "10",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:104:90,
                                        end: [ local path prefix ]/syntax.fpp:104:92,
                                    },
                                },
                                every: Some(
                                    Expr {
                                        kind: Struct(
                                            [
                                                StructMember {
                                                    name: Ident {
                                                        data: "seconds",
                                                        node_id: Span {
                                                            start: [ local path prefix ]/syntax.fpp:104:100,
                                                            end: [ local path prefix ]/syntax.fpp:104:107,
                                                        },
                                                    },
                                                    value: Expr {
                                                        kind: LiteralInt(
                                                            "10",
                                                        ),
                                                        node_id: Span {
                                                            start: [ local path prefix ]/syntax.fpp:104:108,
                                                            end: [ local path prefix ]/syntax.fpp:104:110,
                                                        },
                                                    },
                                                },
                                            ],
                                        ),
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:104:99,
                                            end: [ local path prefix ]/syntax.fpp:105:1,
                                        },
                                    },
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:104:81,
                                    end: [ local path prefix ]/syntax.fpp:105:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:104:6,
                            end: [ local path prefix ]/syntax.fpp:105:1,
                        },
                        pre_annotation: [
                            "Event specifier with throttle timeout",
                        ],
                        post_annotation: [
                            "Event specifier",
                        ],
                    },
                    SpecInternalPort {
                        name: Ident {
                            data: "I",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:108:20,
                                end: [ local path prefix ]/syntax.fpp:108:21,
                            },
                        },
                        params: [
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "a",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:108:22,
                                        end: [ local path prefix ]/syntax.fpp:108:23,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Integer(
                                        U32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:108:25,
                                        end: [ local path prefix ]/syntax.fpp:108:28,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:108:22,
                                    end: [ local path prefix ]/syntax.fpp:108:28,
                                },
                            },
                            FormalParam {
                                kind: Value,
                                name: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:108:30,
                                        end: [ local path prefix ]/syntax.fpp:108:31,
                                    },
                                },
                                type_name: TypeName {
                                    kind: Floating(
                                        F32,
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:108:33,
                                        end: [ local path prefix ]/syntax.fpp:108:36,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:108:30,
                                    end: [ local path prefix ]/syntax.fpp:108:36,
                                },
                            },
                        ],
                        priority: Some(
                            Expr {
                                kind: LiteralInt(
                                    "10",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:108:47,
                                    end: [ local path prefix ]/syntax.fpp:108:49,
                                },
                            },
                        ),
                        queue_full: Some(
                            Assert,
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:108:6,
                            end: [ local path prefix ]/syntax.fpp:109:1,
                        },
                        pre_annotation: [
                            "Internal port specifier",
                        ],
                        post_annotation: [
                            "Internal port specifier",
                        ],
                    },
                    SpecImport {
                        sym: Ident {
                            data: "I",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:112:13,
                                end: [ local path prefix ]/syntax.fpp:113:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:112:6,
                            end: [ local path prefix ]/syntax.fpp:113:1,
                        },
                        pre_annotation: [
                            "Interface import specifier",
                        ],
                        post_annotation: [
                            "Interface import specifier",
                        ],
                    },
                ],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:37:4,
                    end: [ local path prefix ]/syntax.fpp:115:1,
                },
                pre_annotation: [
                    "Component definition",
                ],
                post_annotation: [
                    "Component definition",
                ],
            },
            DefComponentInstance {
                name: Ident {
                    data: "c1",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:118:13,
                        end: [ local path prefix ]/syntax.fpp:118:15,
                    },
                },
                component: Ident {
                    data: "C1",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:118:17,
                        end: [ local path prefix ]/syntax.fpp:118:19,
                    },
                },
                base_id: Expr {
                    kind: LiteralInt(
                        "0x100",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:118:28,
                        end: [ local path prefix ]/syntax.fpp:119:1,
                    },
                },
                impl_type: None,
                file: None,
                queue_size: None,
                stack_size: None,
                priority: None,
                cpu: None,
                init_specs: [],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:118:4,
                    end: [ local path prefix ]/syntax.fpp:119:1,
                },
                pre_annotation: [
                    "Simple component instance definition",
                ],
                post_annotation: [
                    "Simple component instance definition",
                ],
            },
            DefComponentInstance {
                name: Ident {
                    data: "c2",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:122:13,
                        end: [ local path prefix ]/syntax.fpp:122:15,
                    },
                },
                component: Ident {
                    data: "C2",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:122:17,
                        end: [ local path prefix ]/syntax.fpp:122:19,
                    },
                },
                base_id: Expr {
                    kind: LiteralInt(
                        "0x200",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:122:28,
                        end: [ local path prefix ]/syntax.fpp:122:33,
                    },
                },
                impl_type: Some(
                    LitString {
                        data: "T",
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:122:39,
                            end: [ local path prefix ]/syntax.fpp:122:42,
                        },
                    },
                ),
                file: Some(
                    LitString {
                        data: "C2.hpp",
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:122:46,
                            end: [ local path prefix ]/syntax.fpp:122:54,
                        },
                    },
                ),
                queue_size: Some(
                    Expr {
                        kind: LiteralInt(
                            "100",
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:122:66,
                            end: [ local path prefix ]/syntax.fpp:122:69,
                        },
                    },
                ),
                stack_size: Some(
                    Expr {
                        kind: LiteralInt(
                            "1024",
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:122:81,
                            end: [ local path prefix ]/syntax.fpp:122:85,
                        },
                    },
                ),
                priority: Some(
                    Expr {
                        kind: LiteralInt(
                            "10",
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:122:95,
                            end: [ local path prefix ]/syntax.fpp:122:97,
                        },
                    },
                ),
                cpu: Some(
                    Expr {
                        kind: LiteralInt(
                            "0",
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:122:102,
                            end: [ local path prefix ]/syntax.fpp:122:103,
                        },
                    },
                ),
                init_specs: [
                    SpecInit {
                        phase: Expr {
                            kind: Ident(
                                "CONSTRUCTION",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:124:12,
                                end: [ local path prefix ]/syntax.fpp:124:24,
                            },
                        },
                        code: LitString {
                            data: "\"\"\n    line 1\n      line 2\n    line 3\n    \"\"",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:124:25,
                                end: [ local path prefix ]/syntax.fpp:129:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:124:6,
                            end: [ local path prefix ]/syntax.fpp:129:1,
                        },
                        pre_annotation: [
                            "Init specifier",
                        ],
                        post_annotation: [
                            "Init specifier",
                        ],
                    },
                ],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:122:4,
                    end: [ local path prefix ]/syntax.fpp:131:1,
                },
                pre_annotation: [
                    "Component instance definition",
                ],
                post_annotation: [
                    "Component instance definition",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "x",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:134:13,
                        end: [ local path prefix ]/syntax.fpp:134:14,
                    },
                },
                value: Expr {
                    kind: LiteralInt(
                        "0",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:134:17,
                        end: [ local path prefix ]/syntax.fpp:135:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:134:4,
                    end: [ local path prefix ]/syntax.fpp:135:1,
                },
                pre_annotation: [
                    "Constant definition",
                ],
                post_annotation: [
                    "Constant definition",
                ],
            },
            DefEnum {
                name: Ident {
                    data: "E",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:138:9,
                        end: [ local path prefix ]/syntax.fpp:138:10,
                    },
                },
                type_name: Some(
                    TypeName {
                        kind: Integer(
                            I32,
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:138:13,
                            end: [ local path prefix ]/syntax.fpp:138:16,
                        },
                    },
                ),
                constants: [
                    DefEnumConstant {
                        name: Ident {
                            data: "X",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:140:6,
                                end: [ local path prefix ]/syntax.fpp:140:7,
                            },
                        },
                        value: Some(
                            Expr {
                                kind: LiteralInt(
                                    "1",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:140:10,
                                    end: [ local path prefix ]/syntax.fpp:141:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:140:6,
                            end: [ local path prefix ]/syntax.fpp:141:1,
                        },
                        pre_annotation: [
                            "X",
                        ],
                        post_annotation: [
                            "X",
                        ],
                    },
                    DefEnumConstant {
                        name: Ident {
                            data: "Y",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:143:6,
                                end: [ local path prefix ]/syntax.fpp:143:7,
                            },
                        },
                        value: Some(
                            Expr {
                                kind: LiteralInt(
                                    "2",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:143:10,
                                    end: [ local path prefix ]/syntax.fpp:144:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:143:6,
                            end: [ local path prefix ]/syntax.fpp:144:1,
                        },
                        pre_annotation: [
                            "Y",
                        ],
                        post_annotation: [
                            "Y",
                        ],
                    },
                ],
                default: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:138:4,
                    end: [ local path prefix ]/syntax.fpp:146:1,
                },
                pre_annotation: [
                    "Enum definition",
                ],
                post_annotation: [
                    "Enum definition",
                ],
            },
            DefModule {
                name: Ident {
                    data: "M",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:149:11,
                        end: [ local path prefix ]/syntax.fpp:149:12,
                    },
                },
                members: [
                    DefConstant {
                        name: Ident {
                            data: "x",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:151:15,
                                end: [ local path prefix ]/syntax.fpp:151:16,
                            },
                        },
                        value: Expr {
                            kind: LiteralInt(
                                "0",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:151:19,
                                end: [ local path prefix ]/syntax.fpp:152:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:151:6,
                            end: [ local path prefix ]/syntax.fpp:152:1,
                        },
                    },
                ],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:149:4,
                    end: [ local path prefix ]/syntax.fpp:154:1,
                },
                pre_annotation: [
                    "Module definition",
                ],
                post_annotation: [
                    "Module definition",
                ],
            },
            SpecInclude {
                file: LitString {
                    data: "constant.fppi",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:157:12,
                        end: [ local path prefix ]/syntax.fpp:158:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:157:4,
                    end: [ local path prefix ]/syntax.fpp:158:1,
                },
                pre_annotation: [
                    "Include specifier",
                ],
                post_annotation: [
                    "Include specifier",
                ],
            },
            DefPort {
                name: Ident {
                    data: "P",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:161:9,
                        end: [ local path prefix ]/syntax.fpp:161:10,
                    },
                },
                params: [
                    FormalParam {
                        kind: Value,
                        name: Ident {
                            data: "a",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:161:11,
                                end: [ local path prefix ]/syntax.fpp:161:12,
                            },
                        },
                        type_name: TypeName {
                            kind: Integer(
                                U32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:161:14,
                                end: [ local path prefix ]/syntax.fpp:161:17,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:161:11,
                            end: [ local path prefix ]/syntax.fpp:161:17,
                        },
                    },
                    FormalParam {
                        kind: Value,
                        name: Ident {
                            data: "b",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:161:19,
                                end: [ local path prefix ]/syntax.fpp:161:20,
                            },
                        },
                        type_name: TypeName {
                            kind: Floating(
                                F32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:161:22,
                                end: [ local path prefix ]/syntax.fpp:161:25,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:161:19,
                            end: [ local path prefix ]/syntax.fpp:161:25,
                        },
                    },
                ],
                return_type: Some(
                    TypeName {
                        kind: Integer(
                            U32,
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:161:30,
                            end: [ local path prefix ]/syntax.fpp:162:1,
                        },
                    },
                ),
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:161:4,
                    end: [ local path prefix ]/syntax.fpp:162:1,
                },
                pre_annotation: [
                    "Port definition",
                ],
                post_annotation: [
                    "Port definition",
                ],
            },
            DefStruct {
                name: Ident {
                    data: "S",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:165:11,
                        end: [ local path prefix ]/syntax.fpp:165:12,
                    },
                },
                members: [
                    StructTypeMember {
                        name: Ident {
                            data: "x",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:167:6,
                                end: [ local path prefix ]/syntax.fpp:167:7,
                            },
                        },
                        size: None,
                        type_name: TypeName {
                            kind: Integer(
                                U32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:167:9,
                                end: [ local path prefix ]/syntax.fpp:167:12,
                            },
                        },
                        format: Some(
                            LitString {
                                data: "{} s",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:167:20,
                                    end: [ local path prefix ]/syntax.fpp:168:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:167:6,
                            end: [ local path prefix ]/syntax.fpp:168:1,
                        },
                        pre_annotation: [
                            "x",
                        ],
                        post_annotation: [
                            "x",
                        ],
                    },
                    StructTypeMember {
                        name: Ident {
                            data: "y",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:170:6,
                                end: [ local path prefix ]/syntax.fpp:170:7,
                            },
                        },
                        size: None,
                        type_name: TypeName {
                            kind: Floating(
                                F32,
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:170:9,
                                end: [ local path prefix ]/syntax.fpp:170:12,
                            },
                        },
                        format: Some(
                            LitString {
                                data: "{} m/s",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:170:20,
                                    end: [ local path prefix ]/syntax.fpp:171:1,
                                },
                            },
                        ),
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:170:6,
                            end: [ local path prefix ]/syntax.fpp:171:1,
                        },
                        pre_annotation: [
                            "y",
                        ],
                        post_annotation: [
                            "y",
                        ],
                    },
                ],
                default: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:165:4,
                    end: [ local path prefix ]/syntax.fpp:173:1,
                },
                pre_annotation: [
                    "Struct definition",
                ],
                post_annotation: [
                    "Struct definition",
                ],
            },
            DefTopology {
                name: Ident {
                    data: "T",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:176:13,
                        end: [ local path prefix ]/syntax.fpp:176:14,
                    },
                },
                members: [
                    SpecInstance {
                        instance: Ident {
                            data: "i1",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:179:15,
                                end: [ local path prefix ]/syntax.fpp:180:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:179:6,
                            end: [ local path prefix ]/syntax.fpp:180:1,
                        },
                        pre_annotation: [
                            "Public instance specifier",
                        ],
                        post_annotation: [
                            "Public instance specifier",
                        ],
                    },
                    SpecConnectionGraph {
                        kind: Direct {
                            name: Ident {
                                data: "C",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:183:18,
                                    end: [ local path prefix ]/syntax.fpp:183:19,
                                },
                            },
                            connections: [
                                Connection {
                                    is_unmatched: false,
                                    from_port: PortInstanceIdentifier {
                                        interface_instance: Ident {
                                            data: "i1",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:184:8,
                                                end: [ local path prefix ]/syntax.fpp:184:10,
                                            },
                                        },
                                        port_name: Ident {
                                            data: "p",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:184:11,
                                                end: [ local path prefix ]/syntax.fpp:184:12,
                                            },
                                        },
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:184:8,
                                            end: [ local path prefix ]/syntax.fpp:184:12,
                                        },
                                    },
                                    from_index: Some(
                                        Expr {
                                            kind: LiteralInt(
                                                "0",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:184:13,
                                                end: [ local path prefix ]/syntax.fpp:184:14,
                                            },
                                        },
                                    ),
                                    to_port: PortInstanceIdentifier {
                                        interface_instance: Ident {
                                            data: "i2",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:184:19,
                                                end: [ local path prefix ]/syntax.fpp:184:21,
                                            },
                                        },
                                        port_name: Ident {
                                            data: "p",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:184:22,
                                                end: [ local path prefix ]/syntax.fpp:184:23,
                                            },
                                        },
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:184:19,
                                            end: [ local path prefix ]/syntax.fpp:184:23,
                                        },
                                    },
                                    to_index: Some(
                                        Expr {
                                            kind: LiteralInt(
                                                "1",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:184:24,
                                                end: [ local path prefix ]/syntax.fpp:184:25,
                                            },
                                        },
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:184:8,
                                        end: [ local path prefix ]/syntax.fpp:185:1,
                                    },
                                },
                                Connection {
                                    is_unmatched: true,
                                    from_port: PortInstanceIdentifier {
                                        interface_instance: Ident {
                                            data: "i1",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:185:18,
                                                end: [ local path prefix ]/syntax.fpp:185:20,
                                            },
                                        },
                                        port_name: Ident {
                                            data: "p1",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:185:21,
                                                end: [ local path prefix ]/syntax.fpp:185:23,
                                            },
                                        },
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:185:18,
                                            end: [ local path prefix ]/syntax.fpp:185:23,
                                        },
                                    },
                                    from_index: Some(
                                        Expr {
                                            kind: LiteralInt(
                                                "0",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:185:24,
                                                end: [ local path prefix ]/syntax.fpp:185:25,
                                            },
                                        },
                                    ),
                                    to_port: PortInstanceIdentifier {
                                        interface_instance: Ident {
                                            data: "i2",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:185:30,
                                                end: [ local path prefix ]/syntax.fpp:185:32,
                                            },
                                        },
                                        port_name: Ident {
                                            data: "p2",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:185:33,
                                                end: [ local path prefix ]/syntax.fpp:185:35,
                                            },
                                        },
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:185:30,
                                            end: [ local path prefix ]/syntax.fpp:185:35,
                                        },
                                    },
                                    to_index: Some(
                                        Expr {
                                            kind: LiteralInt(
                                                "0",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:185:36,
                                                end: [ local path prefix ]/syntax.fpp:185:37,
                                            },
                                        },
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:185:8,
                                        end: [ local path prefix ]/syntax.fpp:186:1,
                                    },
                                },
                                Connection {
                                    is_unmatched: true,
                                    from_port: PortInstanceIdentifier {
                                        interface_instance: Ident {
                                            data: "i1",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:186:18,
                                                end: [ local path prefix ]/syntax.fpp:186:20,
                                            },
                                        },
                                        port_name: Ident {
                                            data: "p1",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:186:21,
                                                end: [ local path prefix ]/syntax.fpp:186:23,
                                            },
                                        },
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:186:18,
                                            end: [ local path prefix ]/syntax.fpp:186:23,
                                        },
                                    },
                                    from_index: None,
                                    to_port: PortInstanceIdentifier {
                                        interface_instance: Ident {
                                            data: "i2",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:186:27,
                                                end: [ local path prefix ]/syntax.fpp:186:29,
                                            },
                                        },
                                        port_name: Ident {
                                            data: "p2",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:186:30,
                                                end: [ local path prefix ]/syntax.fpp:187:1,
                                            },
                                        },
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:186:27,
                                            end: [ local path prefix ]/syntax.fpp:187:1,
                                        },
                                    },
                                    to_index: None,
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:186:8,
                                        end: [ local path prefix ]/syntax.fpp:187:1,
                                    },
                                },
                            ],
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:183:6,
                            end: [ local path prefix ]/syntax.fpp:188:1,
                        },
                        pre_annotation: [
                            "Direct connection graph specifier",
                        ],
                        post_annotation: [
                            "Direct connection graph specifier",
                        ],
                    },
                    SpecConnectionGraph {
                        kind: Pattern {
                            kind: Command,
                            source: Ident {
                                data: "i1",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:191:35,
                                    end: [ local path prefix ]/syntax.fpp:191:37,
                                },
                            },
                            targets: [
                                Ident {
                                    data: "i2",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:191:40,
                                        end: [ local path prefix ]/syntax.fpp:191:42,
                                    },
                                },
                                Ident {
                                    data: "i3",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:191:44,
                                        end: [ local path prefix ]/syntax.fpp:191:46,
                                    },
                                },
                                Ident {
                                    data: "i4",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:191:48,
                                        end: [ local path prefix ]/syntax.fpp:191:50,
                                    },
                                },
                            ],
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:191:6,
                            end: [ local path prefix ]/syntax.fpp:192:1,
                        },
                        pre_annotation: [
                            "Graph pattern specifier",
                        ],
                        post_annotation: [
                            "Graph pattern specifier",
                        ],
                    },
                    SpecInstance {
                        instance: Ident {
                            data: "T1",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:195:13,
                                end: [ local path prefix ]/syntax.fpp:196:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:195:6,
                            end: [ local path prefix ]/syntax.fpp:196:1,
                        },
                        pre_annotation: [
                            "Topology instance specifier",
                        ],
                        post_annotation: [
                            "Topology instance specifier",
                        ],
                    },
                    SpecTlmPacketSet {
                        name: Ident {
                            data: "P",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:199:24,
                                end: [ local path prefix ]/syntax.fpp:199:25,
                            },
                        },
                        members: [
                            SpecTlmPacket {
                                name: Ident {
                                    data: "P1",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:202:15,
                                        end: [ local path prefix ]/syntax.fpp:202:17,
                                    },
                                },
                                id: Some(
                                    Expr {
                                        kind: LiteralInt(
                                            "0",
                                        ),
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:202:21,
                                            end: [ local path prefix ]/syntax.fpp:202:22,
                                        },
                                    },
                                ),
                                group: Expr {
                                    kind: LiteralInt(
                                        "0",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:202:29,
                                        end: [ local path prefix ]/syntax.fpp:202:30,
                                    },
                                },
                                members: [
                                    TlmChannelIdentifier(
                                        TlmChannelIdentifier {
                                            component_instance: Ident {
                                                data: "i1",
                                                node_id: Span {
                                                    start: [ local path prefix ]/syntax.fpp:203:10,
                                                    end: [ local path prefix ]/syntax.fpp:203:12,
                                                },
                                            },
                                            channel_name: Ident {
                                                data: "c1",
                                                node_id: Span {
                                                    start: [ local path prefix ]/syntax.fpp:203:13,
                                                    end: [ local path prefix ]/syntax.fpp:204:1,
                                                },
                                            },
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:203:10,
                                                end: [ local path prefix ]/syntax.fpp:204:1,
                                            },
                                        },
                                    ),
                                    TlmChannelIdentifier(
                                        TlmChannelIdentifier {
                                            component_instance: Ident {
                                                data: "i2",
                                                node_id: Span {
                                                    start: [ local path prefix ]/syntax.fpp:204:10,
                                                    end: [ local path prefix ]/syntax.fpp:204:12,
                                                },
                                            },
                                            channel_name: Ident {
                                                data: "c2",
                                                node_id: Span {
                                                    start: [ local path prefix ]/syntax.fpp:204:13,
                                                    end: [ local path prefix ]/syntax.fpp:205:1,
                                                },
                                            },
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:204:10,
                                                end: [ local path prefix ]/syntax.fpp:205:1,
                                            },
                                        },
                                    ),
                                ],
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:202:8,
                                    end: [ local path prefix ]/syntax.fpp:206:1,
                                },
                                pre_annotation: [
                                    "Telemetry packet",
                                ],
                                post_annotation: [
                                    "Telemetry packet",
                                ],
                            },
                            SpecInclude {
                                file: LitString {
                                    data: "packet.fppi",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:209:16,
                                        end: [ local path prefix ]/syntax.fpp:210:1,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:209:8,
                                    end: [ local path prefix ]/syntax.fpp:210:1,
                                },
                                pre_annotation: [
                                    "Include specifier",
                                ],
                                post_annotation: [
                                    "Include specifier",
                                ],
                            },
                        ],
                        omitted: [
                            TlmChannelIdentifier {
                                component_instance: Ident {
                                    data: "i3",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:213:8,
                                        end: [ local path prefix ]/syntax.fpp:213:10,
                                    },
                                },
                                channel_name: Ident {
                                    data: "c3",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:213:11,
                                        end: [ local path prefix ]/syntax.fpp:214:1,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:213:8,
                                    end: [ local path prefix ]/syntax.fpp:214:1,
                                },
                            },
                        ],
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:199:6,
                            end: [ local path prefix ]/syntax.fpp:215:1,
                        },
                        pre_annotation: [
                            "Telemetry packet group",
                        ],
                        post_annotation: [
                            "Telemetry packet group",
                        ],
                    },
                    SpecTopPort {
                        name: Ident {
                            data: "a",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:218:11,
                                end: [ local path prefix ]/syntax.fpp:218:12,
                            },
                        },
                        underlying_port: PortInstanceIdentifier {
                            interface_instance: Ident {
                                data: "b",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:218:15,
                                    end: [ local path prefix ]/syntax.fpp:218:16,
                                },
                            },
                            port_name: Ident {
                                data: "a",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:218:17,
                                    end: [ local path prefix ]/syntax.fpp:219:1,
                                },
                            },
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:218:15,
                                end: [ local path prefix ]/syntax.fpp:219:1,
                            },
                        },
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:218:6,
                            end: [ local path prefix ]/syntax.fpp:219:1,
                        },
                        pre_annotation: [
                            "Topology port specifier",
                        ],
                        post_annotation: [
                            "Topology port specifier",
                        ],
                    },
                ],
                implements: [],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:176:4,
                    end: [ local path prefix ]/syntax.fpp:221:1,
                },
                pre_annotation: [
                    "Topology definition",
                ],
                post_annotation: [
                    "Topology definition",
                ],
            },
            DefTopology {
                name: Ident {
                    data: "T",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:224:13,
                        end: [ local path prefix ]/syntax.fpp:224:14,
                    },
                },
                members: [],
                implements: [
                    Ident {
                        data: "I",
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:224:26,
                            end: [ local path prefix ]/syntax.fpp:224:27,
                        },
                    },
                ],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:224:4,
                    end: [ local path prefix ]/syntax.fpp:225:1,
                },
                pre_annotation: [
                    "Topology definition with one implements",
                ],
                post_annotation: [
                    "Topology definition with one implements",
                ],
            },
            DefTopology {
                name: Ident {
                    data: "T",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:228:13,
                        end: [ local path prefix ]/syntax.fpp:228:14,
                    },
                },
                members: [],
                implements: [
                    Ident {
                        data: "I",
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:228:26,
                            end: [ local path prefix ]/syntax.fpp:228:27,
                        },
                    },
                    Ident {
                        data: "I",
                        node_id: Span {
                            start: [ local path prefix ]/syntax.fpp:228:29,
                            end: [ local path prefix ]/syntax.fpp:228:30,
                        },
                    },
                ],
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:228:4,
                    end: [ local path prefix ]/syntax.fpp:229:1,
                },
                pre_annotation: [
                    "Topology definition with two implements",
                ],
                post_annotation: [
                    "Topology definition with two implements",
                ],
            },
            SpecLoc {
                kind: Instance,
                symbol: Ident {
                    data: "i",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:232:20,
                        end: [ local path prefix ]/syntax.fpp:232:21,
                    },
                },
                file: LitString {
                    data: "instances.fpp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:232:25,
                        end: [ local path prefix ]/syntax.fpp:233:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:232:4,
                    end: [ local path prefix ]/syntax.fpp:233:1,
                },
                pre_annotation: [
                    "Location specifier",
                ],
                post_annotation: [
                    "Location specifier",
                ],
            },
        ],
        node_id: Span {
            start: [ local path prefix ]/syntax.fpp:2:2,
            end: [ local path prefix ]/syntax.fpp:236:1,
        },
        pre_annotation: [
            "Definitions and specifiers",
        ],
        post_annotation: [
            "Definitions and specifiers",
        ],
    },
    DefModule {
        name: Ident {
            data: "TypeNames",
            node_id: Span {
                start: [ local path prefix ]/syntax.fpp:239:9,
                end: [ local path prefix ]/syntax.fpp:239:18,
            },
        },
        members: [
            DefArray {
                name: Ident {
                    data: "typeNameU32",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:241:10,
                        end: [ local path prefix ]/syntax.fpp:241:21,
                    },
                },
                size: Expr {
                    kind: LiteralInt(
                        "10",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:241:25,
                        end: [ local path prefix ]/syntax.fpp:241:27,
                    },
                },
                elt_type: TypeName {
                    kind: Integer(
                        U32,
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:241:29,
                        end: [ local path prefix ]/syntax.fpp:242:1,
                    },
                },
                default: None,
                format: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:241:4,
                    end: [ local path prefix ]/syntax.fpp:242:1,
                },
            },
            DefArray {
                name: Ident {
                    data: "typeNameF32",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:242:10,
                        end: [ local path prefix ]/syntax.fpp:242:21,
                    },
                },
                size: Expr {
                    kind: LiteralInt(
                        "10",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:242:25,
                        end: [ local path prefix ]/syntax.fpp:242:27,
                    },
                },
                elt_type: TypeName {
                    kind: Floating(
                        F32,
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:242:29,
                        end: [ local path prefix ]/syntax.fpp:243:1,
                    },
                },
                default: None,
                format: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:242:4,
                    end: [ local path prefix ]/syntax.fpp:243:1,
                },
            },
            DefArray {
                name: Ident {
                    data: "typeNameBool",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:243:10,
                        end: [ local path prefix ]/syntax.fpp:243:22,
                    },
                },
                size: Expr {
                    kind: LiteralInt(
                        "10",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:243:26,
                        end: [ local path prefix ]/syntax.fpp:243:28,
                    },
                },
                elt_type: TypeName {
                    kind: Bool,
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:243:30,
                        end: [ local path prefix ]/syntax.fpp:244:1,
                    },
                },
                default: None,
                format: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:243:4,
                    end: [ local path prefix ]/syntax.fpp:244:1,
                },
            },
            DefArray {
                name: Ident {
                    data: "typeNameString",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:244:10,
                        end: [ local path prefix ]/syntax.fpp:244:24,
                    },
                },
                size: Expr {
                    kind: LiteralInt(
                        "10",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:244:28,
                        end: [ local path prefix ]/syntax.fpp:244:30,
                    },
                },
                elt_type: TypeName {
                    kind: String(
                        Some(
                            Expr {
                                kind: LiteralInt(
                                    "256",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:244:44,
                                    end: [ local path prefix ]/syntax.fpp:245:1,
                                },
                            },
                        ),
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:244:32,
                        end: [ local path prefix ]/syntax.fpp:245:1,
                    },
                },
                default: None,
                format: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:244:4,
                    end: [ local path prefix ]/syntax.fpp:245:1,
                },
            },
            DefArray {
                name: Ident {
                    data: "typeNameQID",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:245:10,
                        end: [ local path prefix ]/syntax.fpp:245:21,
                    },
                },
                size: Expr {
                    kind: LiteralInt(
                        "10",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:245:25,
                        end: [ local path prefix ]/syntax.fpp:245:27,
                    },
                },
                elt_type: TypeName {
                    kind: QualIdent(
                        Qualified {
                            qualifier: Qualified {
                                qualifier: Ident {
                                    data: "a",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:245:29,
                                        end: [ local path prefix ]/syntax.fpp:245:30,
                                    },
                                },
                                name: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:245:31,
                                        end: [ local path prefix ]/syntax.fpp:245:32,
                                    },
                                },
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:245:29,
                                    end: [ local path prefix ]/syntax.fpp:246:1,
                                },
                            },
                            name: Ident {
                                data: "c",
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:245:33,
                                    end: [ local path prefix ]/syntax.fpp:246:1,
                                },
                            },
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:245:29,
                                end: [ local path prefix ]/syntax.fpp:246:1,
                            },
                        },
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:245:29,
                        end: [ local path prefix ]/syntax.fpp:246:1,
                    },
                },
                default: None,
                format: None,
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:245:4,
                    end: [ local path prefix ]/syntax.fpp:246:1,
                },
            },
        ],
        node_id: Span {
            start: [ local path prefix ]/syntax.fpp:239:2,
            end: [ local path prefix ]/syntax.fpp:248:1,
        },
        pre_annotation: [
            "Type names",
        ],
        post_annotation: [
            "Type names",
        ],
    },
    DefModule {
        name: Ident {
            data: "Expressions",
            node_id: Span {
                start: [ local path prefix ]/syntax.fpp:251:9,
                end: [ local path prefix ]/syntax.fpp:251:20,
            },
        },
        members: [
            DefConstant {
                name: Ident {
                    data: "arithExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:254:13,
                        end: [ local path prefix ]/syntax.fpp:254:21,
                    },
                },
                value: Expr {
                    kind: Binop {
                        left: Expr {
                            kind: Binop {
                                left: Expr {
                                    kind: Binop {
                                        left: Expr {
                                            kind: LiteralInt(
                                                "1",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:254:24,
                                                end: [ local path prefix ]/syntax.fpp:254:25,
                                            },
                                        },
                                        op: Add,
                                        right: Expr {
                                            kind: Binop {
                                                left: Expr {
                                                    kind: LiteralInt(
                                                        "2",
                                                    ),
                                                    node_id: Span {
                                                        start: [ local path prefix ]/syntax.fpp:254:28,
                                                        end: [ local path prefix ]/syntax.fpp:254:29,
                                                    },
                                                },
                                                op: Mul,
                                                right: Expr {
                                                    kind: LiteralInt(
                                                        "3",
                                                    ),
                                                    node_id: Span {
                                                        start: [ local path prefix ]/syntax.fpp:254:32,
                                                        end: [ local path prefix ]/syntax.fpp:254:33,
                                                    },
                                                },
                                            },
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:254:28,
                                                end: [ local path prefix ]/syntax.fpp:254:33,
                                            },
                                        },
                                    },
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:254:24,
                                        end: [ local path prefix ]/syntax.fpp:254:33,
                                    },
                                },
                                op: Sub,
                                right: Expr {
                                    kind: Binop {
                                        left: Expr {
                                            kind: Unop {
                                                op: Minus,
                                                e: Expr {
                                                    kind: LiteralInt(
                                                        "4",
                                                    ),
                                                    node_id: Span {
                                                        start: [ local path prefix ]/syntax.fpp:254:37,
                                                        end: [ local path prefix ]/syntax.fpp:254:38,
                                                    },
                                                },
                                            },
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:254:36,
                                                end: [ local path prefix ]/syntax.fpp:254:38,
                                            },
                                        },
                                        op: Mul,
                                        right: Expr {
                                            kind: LiteralInt(
                                                "5",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:254:41,
                                                end: [ local path prefix ]/syntax.fpp:254:42,
                                            },
                                        },
                                    },
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:254:36,
                                        end: [ local path prefix ]/syntax.fpp:254:42,
                                    },
                                },
                            },
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:254:24,
                                end: [ local path prefix ]/syntax.fpp:254:42,
                            },
                        },
                        op: Add,
                        right: Expr {
                            kind: LiteralInt(
                                "6",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:254:45,
                                end: [ local path prefix ]/syntax.fpp:255:1,
                            },
                        },
                    },
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:254:24,
                        end: [ local path prefix ]/syntax.fpp:255:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:254:4,
                    end: [ local path prefix ]/syntax.fpp:255:1,
                },
                pre_annotation: [
                    "Arithmetic",
                ],
                post_annotation: [
                    "Arithmetic",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "arrayExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:258:13,
                        end: [ local path prefix ]/syntax.fpp:258:21,
                    },
                },
                value: Expr {
                    kind: Array(
                        [
                            Expr {
                                kind: LiteralInt(
                                    "1",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:258:26,
                                    end: [ local path prefix ]/syntax.fpp:258:27,
                                },
                            },
                            Expr {
                                kind: LiteralInt(
                                    "2",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:258:29,
                                    end: [ local path prefix ]/syntax.fpp:258:30,
                                },
                            },
                            Expr {
                                kind: LiteralInt(
                                    "3",
                                ),
                                node_id: Span {
                                    start: [ local path prefix ]/syntax.fpp:258:32,
                                    end: [ local path prefix ]/syntax.fpp:258:33,
                                },
                            },
                        ],
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:258:24,
                        end: [ local path prefix ]/syntax.fpp:259:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:258:4,
                    end: [ local path prefix ]/syntax.fpp:259:1,
                },
                pre_annotation: [
                    "Array",
                ],
                post_annotation: [
                    "Array",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "arraySubExp1",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:262:13,
                        end: [ local path prefix ]/syntax.fpp:262:25,
                    },
                },
                value: Expr {
                    kind: ArraySubscript {
                        e1: Expr {
                            kind: Array(
                                [
                                    Expr {
                                        kind: LiteralInt(
                                            "1",
                                        ),
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:262:30,
                                            end: [ local path prefix ]/syntax.fpp:262:31,
                                        },
                                    },
                                    Expr {
                                        kind: LiteralInt(
                                            "2",
                                        ),
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:262:33,
                                            end: [ local path prefix ]/syntax.fpp:262:34,
                                        },
                                    },
                                    Expr {
                                        kind: LiteralInt(
                                            "3",
                                        ),
                                        node_id: Span {
                                            start: [ local path prefix ]/syntax.fpp:262:36,
                                            end: [ local path prefix ]/syntax.fpp:262:37,
                                        },
                                    },
                                ],
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:262:28,
                                end: [ local path prefix ]/syntax.fpp:262:39,
                            },
                        },
                        e2: Expr {
                            kind: LiteralInt(
                                "1",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:262:40,
                                end: [ local path prefix ]/syntax.fpp:262:41,
                            },
                        },
                    },
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:262:28,
                        end: [ local path prefix ]/syntax.fpp:263:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:262:4,
                    end: [ local path prefix ]/syntax.fpp:263:1,
                },
                pre_annotation: [
                    "Array Subscript",
                ],
                post_annotation: [
                    "Array Subscript",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "arraySubExp2",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:266:13,
                        end: [ local path prefix ]/syntax.fpp:266:25,
                    },
                },
                value: Expr {
                    kind: ArraySubscript {
                        e1: Expr {
                            kind: Dot {
                                e: Expr {
                                    kind: Dot {
                                        e: Expr {
                                            kind: Ident(
                                                "a",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:266:28,
                                                end: [ local path prefix ]/syntax.fpp:266:29,
                                            },
                                        },
                                        id: Ident {
                                            data: "b",
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:266:30,
                                                end: [ local path prefix ]/syntax.fpp:266:31,
                                            },
                                        },
                                    },
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:266:28,
                                        end: [ local path prefix ]/syntax.fpp:266:31,
                                    },
                                },
                                id: Ident {
                                    data: "c",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:266:32,
                                        end: [ local path prefix ]/syntax.fpp:266:33,
                                    },
                                },
                            },
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:266:28,
                                end: [ local path prefix ]/syntax.fpp:266:33,
                            },
                        },
                        e2: Expr {
                            kind: LiteralInt(
                                "1",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:266:34,
                                end: [ local path prefix ]/syntax.fpp:266:35,
                            },
                        },
                    },
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:266:28,
                        end: [ local path prefix ]/syntax.fpp:267:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:266:4,
                    end: [ local path prefix ]/syntax.fpp:267:1,
                },
                pre_annotation: [
                    "Array Subscript",
                ],
                post_annotation: [
                    "Array Subscript",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "arraySubExp2",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:270:13,
                        end: [ local path prefix ]/syntax.fpp:270:25,
                    },
                },
                value: Expr {
                    kind: ArraySubscript {
                        e1: Expr {
                            kind: Dot {
                                e: Expr {
                                    kind: ArraySubscript {
                                        e1: Expr {
                                            kind: ArraySubscript {
                                                e1: Expr {
                                                    kind: Dot {
                                                        e: Expr {
                                                            kind: Dot {
                                                                e: Expr {
                                                                    kind: Ident(
                                                                        "a",
                                                                    ),
                                                                    node_id: Span {
                                                                        start: [ local path prefix ]/syntax.fpp:270:28,
                                                                        end: [ local path prefix ]/syntax.fpp:270:29,
                                                                    },
                                                                },
                                                                id: Ident {
                                                                    data: "b",
                                                                    node_id: Span {
                                                                        start: [ local path prefix ]/syntax.fpp:270:30,
                                                                        end: [ local path prefix ]/syntax.fpp:270:31,
                                                                    },
                                                                },
                                                            },
                                                            node_id: Span {
                                                                start: [ local path prefix ]/syntax.fpp:270:28,
                                                                end: [ local path prefix ]/syntax.fpp:270:31,
                                                            },
                                                        },
                                                        id: Ident {
                                                            data: "c",
                                                            node_id: Span {
                                                                start: [ local path prefix ]/syntax.fpp:270:32,
                                                                end: [ local path prefix ]/syntax.fpp:270:33,
                                                            },
                                                        },
                                                    },
                                                    node_id: Span {
                                                        start: [ local path prefix ]/syntax.fpp:270:28,
                                                        end: [ local path prefix ]/syntax.fpp:270:33,
                                                    },
                                                },
                                                e2: Expr {
                                                    kind: LiteralInt(
                                                        "1",
                                                    ),
                                                    node_id: Span {
                                                        start: [ local path prefix ]/syntax.fpp:270:34,
                                                        end: [ local path prefix ]/syntax.fpp:270:35,
                                                    },
                                                },
                                            },
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:270:28,
                                                end: [ local path prefix ]/syntax.fpp:270:36,
                                            },
                                        },
                                        e2: Expr {
                                            kind: LiteralInt(
                                                "2",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:270:37,
                                                end: [ local path prefix ]/syntax.fpp:270:38,
                                            },
                                        },
                                    },
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:270:28,
                                        end: [ local path prefix ]/syntax.fpp:270:39,
                                    },
                                },
                                id: Ident {
                                    data: "s",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:270:40,
                                        end: [ local path prefix ]/syntax.fpp:270:41,
                                    },
                                },
                            },
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:270:28,
                                end: [ local path prefix ]/syntax.fpp:270:41,
                            },
                        },
                        e2: Expr {
                            kind: LiteralInt(
                                "12",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:270:42,
                                end: [ local path prefix ]/syntax.fpp:270:44,
                            },
                        },
                    },
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:270:28,
                        end: [ local path prefix ]/syntax.fpp:271:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:270:4,
                    end: [ local path prefix ]/syntax.fpp:271:1,
                },
                pre_annotation: [
                    "Array Subscript with member selection",
                ],
                post_annotation: [
                    "Array Subscript",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "booleanLiteralExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:274:13,
                        end: [ local path prefix ]/syntax.fpp:274:30,
                    },
                },
                value: Expr {
                    kind: LiteralBool(
                        true,
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:274:33,
                        end: [ local path prefix ]/syntax.fpp:275:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:274:4,
                    end: [ local path prefix ]/syntax.fpp:275:1,
                },
                pre_annotation: [
                    "Boolean literal",
                ],
                post_annotation: [
                    "Boolean literal",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "dotExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:278:13,
                        end: [ local path prefix ]/syntax.fpp:278:19,
                    },
                },
                value: Expr {
                    kind: Dot {
                        e: Expr {
                            kind: Dot {
                                e: Expr {
                                    kind: Ident(
                                        "a",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:278:22,
                                        end: [ local path prefix ]/syntax.fpp:278:23,
                                    },
                                },
                                id: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:278:24,
                                        end: [ local path prefix ]/syntax.fpp:278:25,
                                    },
                                },
                            },
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:278:22,
                                end: [ local path prefix ]/syntax.fpp:278:25,
                            },
                        },
                        id: Ident {
                            data: "c",
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:278:26,
                                end: [ local path prefix ]/syntax.fpp:279:1,
                            },
                        },
                    },
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:278:22,
                        end: [ local path prefix ]/syntax.fpp:279:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:278:4,
                    end: [ local path prefix ]/syntax.fpp:279:1,
                },
                pre_annotation: [
                    "Dot",
                ],
                post_annotation: [
                    "Dot",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "fpLiteralExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:282:13,
                        end: [ local path prefix ]/syntax.fpp:282:25,
                    },
                },
                value: Expr {
                    kind: LiteralFloat(
                        "0.1234",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:282:28,
                        end: [ local path prefix ]/syntax.fpp:283:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:282:4,
                    end: [ local path prefix ]/syntax.fpp:283:1,
                },
                pre_annotation: [
                    "FP literal",
                ],
                post_annotation: [
                    "FP literal",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "identExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:286:13,
                        end: [ local path prefix ]/syntax.fpp:286:21,
                    },
                },
                value: Expr {
                    kind: Ident(
                        "x",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:286:24,
                        end: [ local path prefix ]/syntax.fpp:287:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:286:4,
                    end: [ local path prefix ]/syntax.fpp:287:1,
                },
                pre_annotation: [
                    "Identifier",
                ],
                post_annotation: [
                    "Identifier",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "intLiteralExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:290:13,
                        end: [ local path prefix ]/syntax.fpp:290:26,
                    },
                },
                value: Expr {
                    kind: LiteralInt(
                        "1234",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:290:29,
                        end: [ local path prefix ]/syntax.fpp:291:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:290:4,
                    end: [ local path prefix ]/syntax.fpp:291:1,
                },
                pre_annotation: [
                    "Int literal",
                ],
                post_annotation: [
                    "Int literal",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "parenExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:294:13,
                        end: [ local path prefix ]/syntax.fpp:294:21,
                    },
                },
                value: Expr {
                    kind: Binop {
                        left: Expr {
                            kind: Paren(
                                Expr {
                                    kind: Binop {
                                        left: Expr {
                                            kind: LiteralInt(
                                                "1",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:294:25,
                                                end: [ local path prefix ]/syntax.fpp:294:26,
                                            },
                                        },
                                        op: Add,
                                        right: Expr {
                                            kind: LiteralInt(
                                                "2",
                                            ),
                                            node_id: Span {
                                                start: [ local path prefix ]/syntax.fpp:294:29,
                                                end: [ local path prefix ]/syntax.fpp:294:30,
                                            },
                                        },
                                    },
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:294:25,
                                        end: [ local path prefix ]/syntax.fpp:294:30,
                                    },
                                },
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:294:24,
                                end: [ local path prefix ]/syntax.fpp:294:31,
                            },
                        },
                        op: Mul,
                        right: Expr {
                            kind: LiteralInt(
                                "3",
                            ),
                            node_id: Span {
                                start: [ local path prefix ]/syntax.fpp:294:34,
                                end: [ local path prefix ]/syntax.fpp:295:1,
                            },
                        },
                    },
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:294:24,
                        end: [ local path prefix ]/syntax.fpp:295:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:294:4,
                    end: [ local path prefix ]/syntax.fpp:295:1,
                },
                pre_annotation: [
                    "Paren",
                ],
                post_annotation: [
                    "Paren",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "stringLiteralSingleExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:298:13,
                        end: [ local path prefix ]/syntax.fpp:298:35,
                    },
                },
                value: Expr {
                    kind: LiteralString(
                        "This is a string.",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:298:38,
                        end: [ local path prefix ]/syntax.fpp:299:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:298:4,
                    end: [ local path prefix ]/syntax.fpp:299:1,
                },
                pre_annotation: [
                    "String literal single",
                ],
                post_annotation: [
                    "String literal single",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "stringLiteralMultExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:302:13,
                        end: [ local path prefix ]/syntax.fpp:302:33,
                    },
                },
                value: Expr {
                    kind: LiteralString(
                        "\"\"\n                                  line 1\n                                  line 2\n                                  line 3\n                                  \"\"",
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:302:36,
                        end: [ local path prefix ]/syntax.fpp:307:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:302:4,
                    end: [ local path prefix ]/syntax.fpp:307:1,
                },
                pre_annotation: [
                    "String literal multi",
                ],
                post_annotation: [
                    "String literal multi",
                ],
            },
            DefConstant {
                name: Ident {
                    data: "structExp",
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:310:13,
                        end: [ local path prefix ]/syntax.fpp:310:22,
                    },
                },
                value: Expr {
                    kind: Struct(
                        [
                            StructMember {
                                name: Ident {
                                    data: "a",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:310:27,
                                        end: [ local path prefix ]/syntax.fpp:310:28,
                                    },
                                },
                                value: Expr {
                                    kind: LiteralInt(
                                        "1",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:310:31,
                                        end: [ local path prefix ]/syntax.fpp:310:32,
                                    },
                                },
                            },
                            StructMember {
                                name: Ident {
                                    data: "b",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:310:34,
                                        end: [ local path prefix ]/syntax.fpp:310:35,
                                    },
                                },
                                value: Expr {
                                    kind: LiteralInt(
                                        "2",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:310:38,
                                        end: [ local path prefix ]/syntax.fpp:310:39,
                                    },
                                },
                            },
                            StructMember {
                                name: Ident {
                                    data: "c",
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:310:41,
                                        end: [ local path prefix ]/syntax.fpp:310:42,
                                    },
                                },
                                value: Expr {
                                    kind: LiteralInt(
                                        "3",
                                    ),
                                    node_id: Span {
                                        start: [ local path prefix ]/syntax.fpp:310:45,
                                        end: [ local path prefix ]/syntax.fpp:310:46,
                                    },
                                },
                            },
                        ],
                    ),
                    node_id: Span {
                        start: [ local path prefix ]/syntax.fpp:310:25,
                        end: [ local path prefix ]/syntax.fpp:311:1,
                    },
                },
                node_id: Span {
                    start: [ local path prefix ]/syntax.fpp:310:4,
                    end: [ local path prefix ]/syntax.fpp:311:1,
                },
                pre_annotation: [
                    "Struct",
                ],
                post_annotation: [
                    "Struct",
                ],
            },
        ],
        node_id: Span {
            start: [ local path prefix ]/syntax.fpp:251:2,
            end: [ local path prefix ]/syntax.fpp:314:1,
        },
        pre_annotation: [
            "Expressions",
        ],
        post_annotation: [
            "Expressions",
        ],
    },
]